import type { CallbackContext, EditMessageOptions } from '~/core';
import type { UserSchema } from '~/db';
import { CARDS_VIEW_MAP } from '~/entities/deck';
import type { CardStageMeta, ColorsStageMeta, CountStageMeta, SuitsStageMeta, TurnMeta } from '~/entities/game';

import { txt } from '..';

export class InfoMessage {
	/* MAILING */
	private static players (turnMeta: TurnMeta, me: UserSchema): string {
		return `<b>${me.name} -> ${turnMeta.player.name}</b>\n\n`;
	}

	private static playersCard (turnMeta: CardStageMeta | CountStageMeta | ColorsStageMeta | SuitsStageMeta, me: UserSchema): string {
		return this.players(turnMeta, me) + `<b>–ö–∞—Ä—Ç–∞: ${CARDS_VIEW_MAP[turnMeta.cardName]}</b>\n`;
	}

	public static gameStartedMailing (players: string, deckCount: number): string {
		const gameStarted = txt.gameStarted + '\n' +
			txt.players + ':\n' +
			players + '\n' +
			'\n' +
			txt.gameSettings + ':\n' +
			'‚Ä¢ ' + txt.decksCount + ': ' + deckCount;
		return gameStarted;
	}

	public static gameEndedMailing (winners: string[], countAthanasiuses: number): string {
		const txtGameEnded = txt.gameEnded + '\n\n';

		if (winners.length === 1) {
			return txtGameEnded + `–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>${winners[0]}</b>\n` +
				`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê—Ñ–∞–Ω–∞—Å–∏–µ–≤: <b>${countAthanasiuses}</b>`;
		} else {
			return txtGameEnded + `–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: <b>${winners.join(', ')}</b>\n` +
				`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ê—Ñ–∞–Ω–∞—Å–∏–µ–≤: ${countAthanasiuses}`;
		}
	}

	public static wrongCardMailing (turnMeta: CardStageMeta, me: UserSchema): string {
		return this.players(turnMeta, me) + '–ö–∞—Ä—Ç–∞ –Ω–µ ' + CARDS_VIEW_MAP[turnMeta.cardName];
	}

	public static wrongCountMailing (turnMeta: CountStageMeta, me: UserSchema): string {
		return this.playersCard(turnMeta, me) + '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ ' + turnMeta.count;
	}

	public static wrongColorsMailing (turnMeta: ColorsStageMeta, me: UserSchema): string {
		return this.playersCard(turnMeta, me) + `–¶–≤–µ—Ç–∞ –Ω–µ üî¥: ${turnMeta.redCount} ‚ö´: ${turnMeta.blackCount}`;
	}

	public static wrongSuitsMailing (turnMeta: SuitsStageMeta, me: UserSchema): string {
		return this.playersCard(turnMeta, me) + `–ù–µ ‚ô•Ô∏è: ${turnMeta.suits.hearts} ‚ô¶Ô∏è: ${turnMeta.suits.diamonds} ‚ô†Ô∏è: ${turnMeta.suits.spades} ‚ô£Ô∏è: ${turnMeta.suits.clubs}`;
	}

	public static newAthanasiusMailing (turnMeta: SuitsStageMeta, me: UserSchema): string {
		return `–£ <b>${me.name}</b> –Ω–æ–≤—ã–π –ê—Ñ–∞–Ω–∞—Å–∏–π ${CARDS_VIEW_MAP[turnMeta.cardName]}!`;
	}

	/* ME */
	private static meWrong (turnMeta: TurnMeta): string {
		return '<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª</b>\n' +
			'\n' +
			'–£ ' + turnMeta.player.name;
	}

	public static wrongCardMe (ctx: CallbackContext, turnMeta: CardStageMeta): EditMessageOptions {
		return { ctx, text: this.meWrong(turnMeta) + ` –Ω–µ—Ç ${CARDS_VIEW_MAP[turnMeta.cardName]} :(` };
	}

	public static wrongCountMe (ctx: CallbackContext, turnMeta: CountStageMeta): EditMessageOptions {
		return {
			ctx,
			text: this.meWrong(turnMeta) + ` –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ${CARDS_VIEW_MAP[turnMeta.cardName]} –Ω–µ ${turnMeta.count} :(`,
		};
	}

	public static wrongColorsMe (ctx: CallbackContext, turnMeta: ColorsStageMeta): EditMessageOptions {
		return {
			ctx,
			text: this.meWrong(turnMeta) + ` –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∞—Å–Ω—ã—Ö ${CARDS_VIEW_MAP[turnMeta.cardName]} –Ω–µ ${turnMeta.redCount} :(`,
		};
	}

	public static wrongSuitsMe (ctx: CallbackContext, turnMeta: SuitsStageMeta): EditMessageOptions {
		return {
			ctx,
			text: this.meWrong(turnMeta) + ` –º–∞—Å—Ç–∏ –Ω–µ ‚ô•Ô∏è: ${turnMeta.suits.hearts} ‚ô¶Ô∏è: ${turnMeta.suits.diamonds} ‚ô†Ô∏è: ${turnMeta.suits.spades} ‚ô£Ô∏è: ${turnMeta.suits.clubs} :(`,
		};
	}

	public static newAthanasiusMe (ctx: CallbackContext, turnMeta: SuitsStageMeta): EditMessageOptions {
		return { ctx, text: `<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b> –£ —Ç–µ–±—è –Ω–æ–≤—ã–π –ê—Ñ–∞–Ω–∞—Å–∏–π ${CARDS_VIEW_MAP[turnMeta.cardName]}!` };
	}
}
